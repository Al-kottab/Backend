var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/ApiFeaturesService.html",[0,0.038,1,1.111]],["body/injectables/ApiFeaturesService.html",[0,0.059,1,1.708,2,0.698,3,0.88,4,0.698,5,0.698,6,2.32,7,2.32,8,2.094,9,0.698,10,1.116,11,2.32,12,3.819,13,0.88,14,1.092,15,0.79,16,1.116,17,2.742,18,1.116,19,0.083,20,1.116,21,0.886,22,1.116,23,1.385,24,2.742,25,1.876,26,3.283,27,2.742,28,4.016,29,0.88,30,2.113,31,1.226,32,2.742,33,0.698,34,1.092,35,2.742,36,2.094,37,0.88,38,0.698,39,1.666,40,1.666,41,1.347,42,2.742,43,2.742,44,3.477,45,2.742,46,4.016,47,2.094,48,0.063,49,0.063]],["title/injectables/AuthService.html",[0,0.038,50,1.375]],["body/injectables/AuthService.html",[0,0.036,2,0.35,3,0.441,4,0.35,5,0.35,9,0.35,10,0.684,11,2.267,13,0.684,14,0.547,15,0.579,16,1.129,18,1.129,19,0.085,20,1.166,21,1.004,22,1.129,23,0.849,25,1.908,29,1.082,30,2.048,31,1.31,33,0.35,34,0.547,37,0.441,38,0.35,40,2.048,41,1.446,48,0.039,49,0.039,50,1.295,51,1.049,52,2.611,53,2.131,54,2.131,55,2.611,56,2.611,57,2.942,58,1.993,59,2.942,60,1.993,61,2.246,62,1.374,63,1.374,64,3.37,65,1.374,66,3.634,67,2.131,68,3.185,69,1.374,70,1.049,71,2.131,72,3.185,73,1.374,74,1.374,75,3.516,76,1.374,77,2.131,78,1.374,79,1.993,80,3.516,81,1.374,82,1.993,83,1.374,84,3.37,85,1.374,86,1.374,87,1.049,88,1.374,89,2.131,90,1.374,91,1.374,92,2.611,93,1.374,94,1.374,95,1.374,96,2.131,97,1.627,98,2.396,99,3.883,100,1.627,101,1.295,102,1.374,103,2.131,104,1.374,105,1.049,106,0.835,107,1.374,108,1.049,109,1.993,110,1.374,111,2.849,112,2.965,113,1.374,114,1.374,115,1.374,116,2.131,117,2.131,118,2.611,119,1.374,120,2.611,121,2.131,122,1.374,123,1.374,124,1.788,125,1.374,126,1.587,127,2.942,128,1.374,129,2.131,130,2.611,131,1.295,132,1.627,133,2.131,134,1.342,135,1.788,136,1.587,137,2.131,138,1.374,139,2.611,140,1.374,141,1.374,142,1.049,143,1.049,144,1.374,145,1.993,146,1.374,147,1.374,148,1.374,149,1.374,150,1.374,151,1.374,152,1.374,153,1.374,154,2.131,155,2.131,156,1.374,157,2.131,158,1.374,159,1.374,160,1.374,161,1.049,162,2.611,163,1.374,164,1.374,165,1.374,166,1.374,167,1.374,168,1.374,169,1.374,170,2.611,171,1.374,172,1.374,173,1.374,174,1.374,175,1.374,176,1.295]],["title/injectables/GroupService.html",[0,0.038,177,1.375]],["body/injectables/GroupService.html",[0,0.025,1,1.12,2,0.227,3,0.286,4,0.227,5,0.581,6,0.541,7,0.541,9,0.227,10,0.481,11,1.872,13,0.732,14,0.355,15,0.449,16,1.253,18,1.242,19,0.085,20,1.264,21,0.985,22,1.242,23,1.099,25,2.174,26,0.68,29,1.264,30,1.546,31,1.029,33,0.227,34,0.355,36,0.68,37,0.286,38,0.495,40,1.948,41,1.628,47,1.145,48,0.027,49,0.027,79,3.256,82,2.352,87,2.106,109,1.145,111,2.106,112,2.106,124,0.541,126,2.429,131,0.541,132,0.68,134,1.525,135,2.393,136,2.121,143,0.68,145,1.483,161,0.68,176,0.911,177,0.911,178,0.68,179,1.546,180,2.758,181,2.89,182,1.5,183,1.5,184,1.5,185,1.145,186,1.943,187,1.5,188,1.5,189,1.741,190,1.145,191,1.943,192,1.5,193,1.5,194,1.5,195,1.5,196,1.5,197,1.5,198,1.145,199,1.5,200,1.5,201,1.5,202,2.28,203,0.89,204,1.5,205,1.5,206,1.5,207,3.738,208,0.89,209,3.969,210,1.5,211,0.89,212,1.5,213,2.545,214,0.89,215,0.89,216,2.602,217,2.545,218,2.28,219,0.89,220,1.5,221,3.206,222,2.934,223,1.943,224,1.5,225,1.5,226,1.5,227,0.89,228,1.943,229,0.89,230,1.943,231,0.89,232,0.89,233,1.5,234,0.89,235,0.89,236,1.145,237,0.89,238,1.483,239,0.89,240,2.28,241,2.758,242,0.89,243,3.081,244,1.5,245,2.28,246,2.28,247,1.5,248,1.5,249,1.5,250,1.5,251,0.89,252,1.5,253,0.89,254,1.5,255,0.89,256,1.5,257,0.89,258,1.5,259,0.89,260,1.5,261,0.89,262,1.145,263,0.89,264,1.5,265,0.89,266,1.5,267,2.934,268,0.89,269,1.5,270,1.943,271,0.89,272,1.5,273,0.89,274,2.545,275,1.5,276,0.541,277,0.89,278,0.89,279,0.89,280,1.145,281,0.89,282,1.483,283,0.541,284,0.541,285,3.206,286,1.943,287,1.943,288,0.89,289,1.5,290,0.89,291,0.89,292,1.5,293,0.89,294,0.89,295,0.89,296,0.89,297,0.89,298,0.89,299,1.5,300,0.89,301,0.89,302,0.68,303,0.89]],["title/injectables/OrganizationService.html",[0,0.038,304,1.375]],["body/injectables/OrganizationService.html",[0,0.037,2,0.368,3,0.464,4,0.368,5,0.368,9,0.368,10,0.711,13,0.464,14,0.576,15,0.595,16,1.311,18,1.297,19,0.085,20,1.297,21,1.074,22,1.297,23,0.883,25,2.223,29,1.241,31,1.262,33,0.368,34,0.576,37,0.464,38,0.368,39,0.878,48,0.04,49,0.04,70,2.488,97,1.103,98,0.878,100,1.103,101,1.638,126,2.455,134,1.609,135,2.349,136,1.981,176,2.349,181,1.103,185,2.058,189,2.307,190,1.692,198,1.692,216,2.626,236,1.692,238,2.734,262,1.692,280,1.692,282,1.692,283,1.347,284,0.878,302,2.058,304,1.347,305,1.103,306,2.695,307,2.216,308,2.695,309,2.695,310,2.216,311,2.216,312,2.216,313,2.058,314,2.216,315,1.445,316,1.445,317,1.445,318,2.216,319,1.445,320,1.445,321,3.439,322,1.445,323,4.157,324,1.445,325,3.439,326,1.445,327,1.445,328,1.445,329,1.445,330,1.445,331,2.216,332,1.445,333,2.216,334,1.445,335,2.216,336,1.445,337,1.445,338,1.445,339,3.581,340,1.445,341,2.216,342,1.445,343,2.216,344,2.695,345,1.692,346,2.307,347,1.445,348,1.445]],["title/injectables/PrismaService.html",[0,0.038,15,0.445]],["body/injectables/PrismaService.html",[0,0.06,2,0.732,3,0.922,4,0.732,5,0.732,9,0.732,10,1.15,13,0.922,15,0.705,16,1.15,18,0.922,19,0.084,20,0.922,21,0.732,22,0.922,29,0.922,31,1.252,33,0.732,37,0.922,38,0.732,48,0.065,49,0.065,60,2.194,61,3.118,106,1.746,134,1.145,142,2.194,276,1.746,349,2.194,350,3.581,351,3.901,352,4.084,353,3.581,354,2.874,355,2.874,356,2.874,357,2.874,358,2.874,359,2.874,360,2.874,361,2.874,362,2.874,363,2.874,364,2.874,365,2.874,366,2.874,367,2.874,368,2.874,369,2.874,370,2.874]],["title/injectables/UserService.html",[0,0.038,371,1.375]],["body/injectables/UserService.html",[0,0.052,2,0.584,3,0.735,4,0.584,5,0.584,9,0.584,10,0.992,13,0.735,14,0.913,15,0.737,16,1.293,18,1.293,19,0.084,20,1.293,21,1.026,22,1.293,23,1.231,29,1.255,31,1.344,33,0.584,34,0.913,37,0.735,38,0.584,39,1.392,48,0.056,49,0.056,98,2.126,101,1.392,124,1.392,131,1.392,134,1.558,283,2.126,284,1.392,313,2.36,345,1.749,346,2.671,371,1.878,372,1.749,373,3.091,374,3.091,375,3.091,376,3.091,377,2.291,378,3.091,379,4.469,380,2.291,381,3.091,382,2.291,383,3.091,384,2.291,385,3.091,386,2.291,387,3.091,388,3.911,389,2.291,390,3.499,391,3.091,392,2.291,393,3.091,394,3.091,395,3.091]],["title/coverage.html",[396,1.862]],["body/coverage.html",[0,0.074,1,1.545,5,0.801,6,1.911,7,1.911,8,2.402,15,0.619,19,0.081,21,0.801,41,1.545,48,0.069,49,0.069,50,1.911,51,2.402,177,1.911,178,2.402,304,1.911,305,2.402,349,2.402,371,1.911,372,2.402,396,1.911,397,3.146,398,3.146,399,3.146,400,4.311,401,3.146,402,3.146,403,3.146,404,3.146,405,3.785,406,3.146,407,3.146,408,3.146]],["title/dependencies.html",[409,1.451,410,2.073]],["body/dependencies.html",[19,0.084,33,0.767,38,0.939,48,0.067,49,0.067,58,2.299,105,2.299,106,1.83,108,2.299,276,1.83,410,2.299,411,4.151,412,3.011,413,3.011,414,3.011,415,3.011,416,3.011,417,3.011,418,3.011,419,3.011,420,3.011,421,3.011,422,3.011,423,3.011,424,3.011,425,3.011,426,3.011,427,3.011,428,3.011,429,3.011,430,3.011,431,3.011,432,3.011,433,3.686,434,3.011,435,3.011,436,3.011,437,3.011,438,3.011,439,3.011,440,3.011,441,3.011,442,3.011]],["title/index.html",[9,0.484,443,1.9,444,1.9]],["body/index.html",[4,0.717,19,0.082,48,0.064,49,0.064,179,1.709,396,1.709,445,2.813,446,2.813,447,3.534,448,2.813,449,2.813,450,2.813,451,2.813,452,2.813,453,2.813,454,3.864,455,2.813,456,2.813,457,2.813,458,2.813,459,4.325,460,2.813,461,2.813,462,2.813,463,4.262,464,2.813,465,2.813,466,3.534,467,2.813,468,2.813,469,2.813,470,2.813,471,3.534,472,3.534,473,2.813,474,2.813,475,2.813,476,3.534,477,3.534,478,2.813,479,2.813,480,2.813,481,2.813,482,2.813,483,2.813,484,2.813,485,2.813,486,2.813,487,2.813,488,2.813,489,2.813,490,2.813,491,2.813,492,2.813,493,2.813,494,2.148,495,2.813,496,2.813,497,2.148,498,2.813,499,2.813,500,2.813,501,2.148]],["title/modules.html",[502,2.34]],["body/modules.html",[19,0.074,48,0.074,49,0.074,502,2.732]],["title/overview.html",[503,2.34]],["body/overview.html",[2,0.906,19,0.074,48,0.074,49,0.074,503,2.715,504,3.557]],["title/properties.html",[409,1.451,505,2.073]],["body/properties.html",[19,0.081,48,0.071,49,0.071,179,2.034,494,2.556,497,2.556,501,2.556,505,2.556,506,3.348,507,3.348,508,3.348,509,3.348,510,3.348,511,3.348,512,3.348,513,3.348,514,3.348,515,3.348,516,3.348,517,3.928,518,3.348,519,3.348]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["0.0.0",{"_index":507,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["0.30.3",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["0/15",{"_index":404,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":401,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":47,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/GroupService.html":{}}}],["1.0.25",{"_index":430,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["12h",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{}}}],["15",{"_index":45,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["2",{"_index":249,"title":{},"body":{"injectables/GroupService.html":{}}}],["2.2.0",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":402,"title":{},"body":{"coverage.html":{}}}],["3.0.2",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["3.3.2",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["4.9.0",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["5/21",{"_index":403,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":504,"title":{},"body":{"overview.html":{}}}],["6.1.4",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["7.0.0",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["acceptjoiningrequest",{"_index":306,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["acceptjoiningrequest(id",{"_index":316,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["acceptstudent",{"_index":183,"title":{},"body":{"injectables/GroupService.html":{}}}],["acceptstudent(groupid",{"_index":206,"title":{},"body":{"injectables/GroupService.html":{}}}],["access_token",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":484,"title":{},"body":{"index.html":{}}}],["amount",{"_index":247,"title":{},"body":{"injectables/GroupService.html":{}}}],["announcement",{"_index":221,"title":{},"body":{"injectables/GroupService.html":{}}}],["announcement's",{"_index":231,"title":{},"body":{"injectables/GroupService.html":{}}}],["announcementdto",{"_index":217,"title":{},"body":{"injectables/GroupService.html":{}}}],["announcementid",{"_index":228,"title":{},"body":{"injectables/GroupService.html":{}}}],["announcements",{"_index":243,"title":{},"body":{"injectables/GroupService.html":{}}}],["announcements.dto",{"_index":281,"title":{},"body":{"injectables/GroupService.html":{}}}],["api",{"_index":204,"title":{},"body":{"injectables/GroupService.html":{}}}],["apifeatures",{"_index":202,"title":{},"body":{"injectables/GroupService.html":{}}}],["apifeaturesdto",{"_index":26,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/GroupService.html":{}}}],["apifeaturesdto.page",{"_index":46,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["apifeaturesdto.take",{"_index":44,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["apifeaturesservice",{"_index":1,"title":{"injectables/ApiFeaturesService.html":{}},"body":{"injectables/ApiFeaturesService.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["app",{"_index":461,"title":{},"body":{"index.html":{}}}],["applications",{"_index":453,"title":{},"body":{"index.html":{}}}],["argon",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.hash(authsignupdto.password",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon.verify(user.passwordhash",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["argon2",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["asktojoin",{"_index":307,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["asktojoin(id",{"_index":318,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["asktojoinagroup",{"_index":184,"title":{},"body":{"injectables/GroupService.html":{}}}],["asktojoinagroup(groupid",{"_index":210,"title":{},"body":{"injectables/GroupService.html":{}}}],["async",{"_index":11,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["authdto",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.email",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["authdto.password",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["author",{"_index":494,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":50,"title":{"injectables/AuthService.html":{}},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["authsignupdto",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["authsignupdto.email",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["authsignupdto.name",{"_index":148,"title":{},"body":{"injectables/AuthService.html":{}}}],["authsignupdto.phonenumber",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["authsignupdto.type",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["authsignupdto.username",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["await",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["backers",{"_index":485,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":273,"title":{},"body":{"injectables/GroupService.html":{}}}],["break",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["building",{"_index":448,"title":{},"body":{"index.html":{}}}],["case",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["catch",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["certain",{"_index":230,"title":{},"body":{"injectables/GroupService.html":{}}}],["changepassword",{"_index":52,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(changepassworddto",{"_index":63,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassworddto",{"_index":64,"title":{},"body":{"injectables/AuthService.html":{}}}],["check",{"_index":290,"title":{},"body":{"injectables/GroupService.html":{}}}],["class",{"_index":38,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["cleandb",{"_index":352,"title":{},"body":{"injectables/PrismaService.html":{}}}],["cli",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["compare",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["config",{"_index":60,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{}}}],["config.get('database_url",{"_index":359,"title":{},"body":{"injectables/PrismaService.html":{}}}],["configservice",{"_index":61,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{}}}],["console.error(err",{"_index":296,"title":{},"body":{"injectables/GroupService.html":{}}}],["const",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["constructor",{"_index":13,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["constructor(config",{"_index":353,"title":{},"body":{"injectables/PrismaService.html":{}}}],["constructor(prisma",{"_index":14,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["constructor(private",{"_index":39,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["coverage",{"_index":396,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":185,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["create(creategroupdto",{"_index":212,"title":{},"body":{"injectables/GroupService.html":{}}}],["create(createorganizationdto",{"_index":320,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["createannouncement",{"_index":186,"title":{},"body":{"injectables/GroupService.html":{}}}],["createannouncement(groupid",{"_index":215,"title":{},"body":{"injectables/GroupService.html":{}}}],["createannouncementdto",{"_index":218,"title":{},"body":{"injectables/GroupService.html":{}}}],["created",{"_index":226,"title":{},"body":{"injectables/GroupService.html":{}}}],["createdat",{"_index":300,"title":{},"body":{"injectables/GroupService.html":{}}}],["creategroup",{"_index":308,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["creategroup(createorganizationgroupdto",{"_index":324,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["creategroupdto",{"_index":213,"title":{},"body":{"injectables/GroupService.html":{}}}],["createorganizationdto",{"_index":321,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["createorganizationgroupdto",{"_index":325,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["creates",{"_index":220,"title":{},"body":{"injectables/GroupService.html":{}}}],["creation",{"_index":225,"title":{},"body":{"injectables/GroupService.html":{}}}],["data",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["data/dummy",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["datasources",{"_index":357,"title":{},"body":{"injectables/PrismaService.html":{}}}],["date",{"_index":301,"title":{},"body":{"injectables/GroupService.html":{}}}],["db",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{}}}],["default",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["defined",{"_index":16,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["deleteannouncement",{"_index":187,"title":{},"body":{"injectables/GroupService.html":{}}}],["deleteannouncement(groupid",{"_index":227,"title":{},"body":{"injectables/GroupService.html":{}}}],["deletestudent",{"_index":188,"title":{},"body":{"injectables/GroupService.html":{}}}],["deletestudent(groupid",{"_index":233,"title":{},"body":{"injectables/GroupService.html":{}}}],["deleteteacher",{"_index":309,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["deleteteacher(id",{"_index":327,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["dependencies",{"_index":410,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":179,"title":{},"body":{"injectables/GroupService.html":{},"index.html":{},"properties.html":{}}}],["determines",{"_index":245,"title":{},"body":{"injectables/GroupService.html":{}}}],["development",{"_index":462,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":397,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["dto",{"_index":299,"title":{},"body":{"injectables/GroupService.html":{}}}],["dto/api",{"_index":35,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["dto/auth",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/auth.dto",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/change",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/create",{"_index":280,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["dto/forget",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/get",{"_index":392,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/reset",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{}}}],["dto/returned",{"_index":283,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":284,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["dummy",{"_index":345,"title":{},"body":{"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":473,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":449,"title":{},"body":{"index.html":{}}}],["email",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{}}}],["encapsulates",{"_index":224,"title":{},"body":{"injectables/GroupService.html":{}}}],["err",{"_index":295,"title":{},"body":{"injectables/GroupService.html":{}}}],["error",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["error.code",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["exception",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["exist",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":37,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["express",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["express.multer.file",{"_index":270,"title":{},"body":{"injectables/GroupService.html":{}}}],["extends",{"_index":350,"title":{},"body":{"injectables/PrismaService.html":{}}}],["fail",{"_index":232,"title":{},"body":{"injectables/GroupService.html":{}}}],["fareed",{"_index":516,"title":{},"body":{"properties.html":{}}}],["features",{"_index":205,"title":{},"body":{"injectables/GroupService.html":{}}}],["features.dto",{"_index":36,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/GroupService.html":{}}}],["features.service",{"_index":279,"title":{},"body":{"injectables/GroupService.html":{}}}],["features.service.ts",{"_index":8,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"coverage.html":{}}}],["features.service.ts:6",{"_index":17,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["features.service.ts:9",{"_index":27,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["features/api",{"_index":7,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["features/dto/api",{"_index":277,"title":{},"body":{"injectables/GroupService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["find",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{}}}],["findall",{"_index":189,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["findone",{"_index":190,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["findone(id",{"_index":236,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["forbiddenexception",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["forbiddenexception('credentials",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgetpassword",{"_index":53,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgetpassword(forgetpassworddto",{"_index":67,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgetpassworddto",{"_index":68,"title":{},"body":{"injectables/AuthService.html":{}}}],["forgotten",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["framework",{"_index":447,"title":{},"body":{"index.html":{}}}],["generate",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["getallgroups",{"_index":310,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["getallgroups(id",{"_index":331,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["getallteachers",{"_index":311,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["getallteachers(id",{"_index":333,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["getannouncements",{"_index":191,"title":{},"body":{"injectables/GroupService.html":{}}}],["getannouncements(groupid",{"_index":239,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupstudents",{"_index":192,"title":{},"body":{"injectables/GroupService.html":{}}}],["getgroupstudents(groupid",{"_index":250,"title":{},"body":{"injectables/GroupService.html":{}}}],["getmygroups",{"_index":193,"title":{},"body":{"injectables/GroupService.html":{}}}],["getmygroups(userid",{"_index":252,"title":{},"body":{"injectables/GroupService.html":{}}}],["getpaginationlist",{"_index":12,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["getpaginationlist(model",{"_index":24,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["getprofile",{"_index":373,"title":{},"body":{"injectables/UserService.html":{}}}],["getprofile(getuserinfodto",{"_index":378,"title":{},"body":{"injectables/UserService.html":{}}}],["getstudentschedule",{"_index":374,"title":{},"body":{"injectables/UserService.html":{}}}],["getstudentschedule(getuserinfodto",{"_index":381,"title":{},"body":{"injectables/UserService.html":{}}}],["getteacherschedule",{"_index":375,"title":{},"body":{"injectables/UserService.html":{}}}],["getteacherschedule(getuserinfodto",{"_index":383,"title":{},"body":{"injectables/UserService.html":{}}}],["getting",{"_index":443,"title":{"index.html":{}},"body":{}}],["getunhafezstudents",{"_index":194,"title":{},"body":{"injectables/GroupService.html":{}}}],["getunhafezstudents(groupid",{"_index":254,"title":{},"body":{"injectables/GroupService.html":{}}}],["getuser",{"_index":376,"title":{},"body":{"injectables/UserService.html":{}}}],["getuser(getuserinfodto",{"_index":385,"title":{},"body":{"injectables/UserService.html":{}}}],["getuserinfodto",{"_index":379,"title":{},"body":{"injectables/UserService.html":{}}}],["givebadgetostudent",{"_index":195,"title":{},"body":{"injectables/GroupService.html":{}}}],["givebadgetostudent(groupid",{"_index":256,"title":{},"body":{"injectables/GroupService.html":{}}}],["group",{"_index":181,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["group's",{"_index":222,"title":{},"body":{"injectables/GroupService.html":{}}}],["group.dto",{"_index":282,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["group.teacherid",{"_index":287,"title":{},"body":{"injectables/GroupService.html":{}}}],["group_id",{"_index":298,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupannouncement",{"_index":275,"title":{},"body":{"injectables/GroupService.html":{}}}],["groupid",{"_index":209,"title":{},"body":{"injectables/GroupService.html":{}}}],["groups",{"_index":513,"title":{},"body":{"properties.html":{}}}],["groupservice",{"_index":177,"title":{"injectables/GroupService.html":{}},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["grow",{"_index":480,"title":{},"body":{"index.html":{}}}],["hash",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["helping",{"_index":508,"title":{},"body":{"properties.html":{}}}],["here",{"_index":491,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":498,"title":{},"body":{"index.html":{}}}],["id",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["identifier",{"_index":398,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":31,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["incorrect",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["info.dto",{"_index":390,"title":{},"body":{"injectables/UserService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["installation",{"_index":458,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":460,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["internalservererrorexception",{"_index":32,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["internalservererrorexception('no",{"_index":42,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["isstudent",{"_index":292,"title":{},"body":{"injectables/GroupService.html":{}}}],["join",{"_index":487,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":58,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["jwtservice",{"_index":59,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":495,"title":{},"body":{"index.html":{}}}],["leave",{"_index":312,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["leave(id",{"_index":335,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["leavegroup",{"_index":196,"title":{},"body":{"injectables/GroupService.html":{}}}],["leavegroup(groupid",{"_index":258,"title":{},"body":{"injectables/GroupService.html":{}}}],["license",{"_index":501,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":477,"title":{},"body":{"index.html":{}}}],["lightcookie",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["literal",{"_index":70,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OrganizationService.html":{}}}],["login",{"_index":54,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(authdto",{"_index":71,"title":{},"body":{"injectables/AuthService.html":{}}}],["logo",{"_index":302,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["manage",{"_index":511,"title":{},"body":{"properties.html":{}}}],["markstudentashafez",{"_index":197,"title":{},"body":{"injectables/GroupService.html":{}}}],["markstudentashafez(groupid",{"_index":260,"title":{},"body":{"injectables/GroupService.html":{}}}],["matching",{"_index":49,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["metadata",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["mit",{"_index":476,"title":{},"body":{"index.html":{}}}],["moaz",{"_index":519,"title":{},"body":{"properties.html":{}}}],["mode",{"_index":466,"title":{},"body":{"index.html":{}}}],["model",{"_index":28,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["module",{"_index":182,"title":{},"body":{"injectables/GroupService.html":{}}}],["modules",{"_index":502,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mohamed",{"_index":517,"title":{},"body":{"properties.html":{}}}],["more",{"_index":490,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":496,"title":{},"body":{"index.html":{}}}],["nabil",{"_index":518,"title":{},"body":{"properties.html":{}}}],["name",{"_index":20,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":454,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":500,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":33,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":41,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["node.js",{"_index":446,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":274,"title":{},"body":{"injectables/GroupService.html":{}}}],["npm",{"_index":459,"title":{},"body":{"index.html":{}}}],["null",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["omar",{"_index":515,"title":{},"body":{"properties.html":{}}}],["open",{"_index":478,"title":{},"body":{"index.html":{}}}],["optional",{"_index":22,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["organization",{"_index":343,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organization.dto",{"_index":344,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["organizationservice",{"_index":304,"title":{"injectables/OrganizationService.html":{}},"body":{"injectables/OrganizationService.html":{},"coverage.html":{}}}],["overview",{"_index":503,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p2002",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["package",{"_index":409,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pactum",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["page",{"_index":241,"title":{},"body":{"injectables/GroupService.html":{}}}],["pagination",{"_index":289,"title":{},"body":{"injectables/GroupService.html":{}}}],["param",{"_index":285,"title":{},"body":{"injectables/GroupService.html":{}}}],["parameters",{"_index":18,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["passport",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["password",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["password.dto",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{}}}],["path",{"_index":272,"title":{},"body":{"injectables/GroupService.html":{}}}],["path/to/file",{"_index":297,"title":{},"body":{"injectables/GroupService.html":{}}}],["path/to/logo",{"_index":303,"title":{},"body":{"injectables/GroupService.html":{}}}],["payload",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{}}}],["phone",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["please",{"_index":488,"title":{},"body":{"index.html":{}}}],["prisma",{"_index":23,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["prisma/client",{"_index":276,"title":{},"body":{"injectables/GroupService.html":{},"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/client/runtime",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{}}}],["prisma/prisma.service",{"_index":34,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["prismaclient",{"_index":351,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismaclientknownrequesterror",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["prismaservice",{"_index":15,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["private",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["production",{"_index":468,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":445,"title":{},"body":{"index.html":{}}}],["project",{"_index":479,"title":{},"body":{"index.html":{}}}],["promise",{"_index":30,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["properties",{"_index":505,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["provided",{"_index":43,"title":{},"body":{"injectables/ApiFeaturesService.html":{}}}],["pwmatches",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["quraan",{"_index":509,"title":{},"body":{"properties.html":{}}}],["read",{"_index":489,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["remove",{"_index":198,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["remove(id",{"_index":262,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["removebadgefromstudent",{"_index":199,"title":{},"body":{"injectables/GroupService.html":{}}}],["removebadgefromstudent(groupid",{"_index":264,"title":{},"body":{"injectables/GroupService.html":{}}}],["repository",{"_index":457,"title":{},"body":{"index.html":{}}}],["resetforgottenpassword",{"_index":55,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetforgottenpassword(resettoken",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{}}}],["resetforgottenpassworddto",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{}}}],["resettoken",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{}}}],["results",{"_index":48,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["returnedgroupdto",{"_index":238,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["returnedorganizationdto",{"_index":323,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["returnedstudentscheduledto",{"_index":393,"title":{},"body":{"injectables/UserService.html":{}}}],["returnedteacherscheduledto",{"_index":395,"title":{},"body":{"injectables/UserService.html":{}}}],["returneduserandtokendto",{"_index":66,"title":{},"body":{"injectables/AuthService.html":{}}}],["returneduserandtokensignupdto",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["returneduserdto",{"_index":346,"title":{},"body":{"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["returneduserinfodto",{"_index":391,"title":{},"body":{"injectables/UserService.html":{}}}],["returns",{"_index":29,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":463,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":450,"title":{},"body":{"index.html":{}}}],["schedule.dto",{"_index":394,"title":{},"body":{"injectables/UserService.html":{}}}],["secret",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["server",{"_index":451,"title":{},"body":{"index.html":{}}}],["service",{"_index":180,"title":{},"body":{"injectables/GroupService.html":{}}}],["side",{"_index":452,"title":{},"body":{"index.html":{}}}],["signtoken",{"_index":56,"title":{},"body":{"injectables/AuthService.html":{}}}],["signtoken(userid",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup",{"_index":57,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup(authsignupdto",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{}}}],["signup.dto",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":482,"title":{},"body":{"index.html":{}}}],["src/auth/auth.service.ts",{"_index":51,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:117",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:139",{"_index":69,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:149",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:156",{"_index":65,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":62,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:62",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/group/group.service.ts",{"_index":178,"title":{},"body":{"injectables/GroupService.html":{},"coverage.html":{}}}],["src/group/group.service.ts:103",{"_index":242,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:153",{"_index":229,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:184",{"_index":271,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:187",{"_index":253,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:190",{"_index":214,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:194",{"_index":235,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:198",{"_index":237,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:20",{"_index":203,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:208",{"_index":268,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:212",{"_index":263,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:31",{"_index":265,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:34",{"_index":257,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:37",{"_index":234,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:40",{"_index":208,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:43",{"_index":259,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:46",{"_index":211,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:49",{"_index":261,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:53",{"_index":255,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:56",{"_index":251,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/group/group.service.ts:66",{"_index":219,"title":{},"body":{"injectables/GroupService.html":{}}}],["src/organization/organization.service.ts",{"_index":305,"title":{},"body":{"injectables/OrganizationService.html":{},"coverage.html":{}}}],["src/organization/organization.service.ts:14",{"_index":315,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:17",{"_index":322,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:23",{"_index":329,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:27",{"_index":330,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:31",{"_index":340,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:38",{"_index":342,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:42",{"_index":337,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:49",{"_index":334,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:53",{"_index":319,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:60",{"_index":317,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:70",{"_index":336,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:77",{"_index":328,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:87",{"_index":326,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/organization/organization.service.ts:93",{"_index":332,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":349,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{}}}],["src/prisma/prisma.service.ts:16",{"_index":355,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:6",{"_index":354,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/user/user.service.ts",{"_index":372,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:11",{"_index":377,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:14",{"_index":389,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:18",{"_index":386,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":380,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":382,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:30",{"_index":384,"title":{},"body":{"injectables/UserService.html":{}}}],["src/utils/api",{"_index":6,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/GroupService.html":{},"coverage.html":{}}}],["start",{"_index":464,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":467,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":469,"title":{},"body":{"index.html":{}}}],["started",{"_index":444,"title":{"index.html":{}},"body":{}}],["starter",{"_index":456,"title":{},"body":{"index.html":{}}}],["starts",{"_index":248,"title":{},"body":{"injectables/GroupService.html":{}}}],["statements",{"_index":399,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["stay",{"_index":492,"title":{},"body":{"index.html":{}}}],["string",{"_index":25,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["student",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/UserService.html":{}}}],["studentid",{"_index":207,"title":{},"body":{"injectables/GroupService.html":{}}}],["students",{"_index":512,"title":{},"body":{"properties.html":{}}}],["sub",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["super",{"_index":356,"title":{},"body":{"injectables/PrismaService.html":{}}}],["support",{"_index":483,"title":{},"body":{"index.html":{}}}],["switch",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["table",{"_index":408,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":407,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":240,"title":{},"body":{"injectables/GroupService.html":{}}}],["taken",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["teacher",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/UserService.html":{}}}],["teacher's",{"_index":223,"title":{},"body":{"injectables/GroupService.html":{}}}],["teacherid",{"_index":216,"title":{},"body":{"injectables/GroupService.html":{},"injectables/OrganizationService.html":{}}}],["teachers",{"_index":510,"title":{},"body":{"properties.html":{}}}],["test",{"_index":472,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":475,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":474,"title":{},"body":{"index.html":{}}}],["tests",{"_index":471,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":481,"title":{},"body":{"index.html":{}}}],["this.$transaction",{"_index":360,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.badge.deletemany",{"_index":362,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.config.get('jwt_secret",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.group.deletemany",{"_index":366,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.groupannouncement.deletemany",{"_index":363,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.groupstudent.deletemany",{"_index":365,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.jwt.signasync(payload",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.organization.deletemany",{"_index":367,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.organizationteacher.deletemany",{"_index":364,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.prisma.group.findunique",{"_index":286,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.prisma.groupannouncement.create",{"_index":288,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.prisma.groupannouncement.delete",{"_index":294,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.prisma.groupstudent.count",{"_index":293,"title":{},"body":{"injectables/GroupService.html":{}}}],["this.prisma.student.create",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.teacher.create",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.teacher.findunique",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.create",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.user.findunique",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.signtoken(user.id",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.student.deletemany",{"_index":368,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.studentbadge.deletemany",{"_index":361,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.teacher.deletemany",{"_index":369,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.user.deletemany",{"_index":370,"title":{},"body":{"injectables/PrismaService.html":{}}}],["throw",{"_index":40,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["token",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.access_token",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{}}}],["token.dto",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":493,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["try",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["twitter",{"_index":499,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"injectables/ApiFeaturesService.html":{},"injectables/AuthService.html":{},"injectables/GroupService.html":{},"injectables/OrganizationService.html":{},"injectables/PrismaService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typescript",{"_index":455,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["unauthorizedexception('credentials",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["unit",{"_index":470,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":348,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["unlicensed",{"_index":514,"title":{},"body":{"properties.html":{}}}],["update",{"_index":200,"title":{},"body":{"injectables/GroupService.html":{}}}],["update(id",{"_index":266,"title":{},"body":{"injectables/GroupService.html":{}}}],["updategroupdto",{"_index":267,"title":{},"body":{"injectables/GroupService.html":{}}}],["updateinfo",{"_index":313,"title":{},"body":{"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["updateinfo(id",{"_index":338,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["updateinfo(updateinfodto",{"_index":387,"title":{},"body":{"injectables/UserService.html":{}}}],["updateinfodto",{"_index":388,"title":{},"body":{"injectables/UserService.html":{}}}],["updatelogo",{"_index":314,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["updatelogo(id",{"_index":341,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["updateorganizationdto",{"_index":339,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["uploadlogo",{"_index":201,"title":{},"body":{"injectables/GroupService.html":{}}}],["uploadlogo(groupid",{"_index":269,"title":{},"body":{"injectables/GroupService.html":{}}}],["url",{"_index":358,"title":{},"body":{"injectables/PrismaService.html":{}}}],["user",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OrganizationService.html":{},"injectables/UserService.html":{}}}],["user's",{"_index":244,"title":{},"body":{"injectables/GroupService.html":{}}}],["user.dto",{"_index":347,"title":{},"body":{"injectables/OrganizationService.html":{}}}],["user.email",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.passwordhash",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dto/returned",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OrganizationService.html":{}}}],["user/dummy",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{},"injectables/OrganizationService.html":{}}}],["userid",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GroupService.html":{}}}],["username",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{}}}],["userservice",{"_index":371,"title":{"injectables/UserService.html":{}},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["utils/api",{"_index":278,"title":{},"body":{"injectables/GroupService.html":{}}}],["validator",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["version",{"_index":506,"title":{},"body":{"properties.html":{}}}],["wanted",{"_index":246,"title":{},"body":{"injectables/GroupService.html":{}}}],["watch",{"_index":465,"title":{},"body":{"index.html":{}}}],["website",{"_index":497,"title":{},"body":{"index.html":{},"properties.html":{}}}],["whether",{"_index":291,"title":{},"body":{"injectables/GroupService.html":{}}}],["you'd",{"_index":486,"title":{},"body":{"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ApiFeaturesService.html":{"url":"injectables/ApiFeaturesService.html","title":"injectable - ApiFeaturesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ApiFeaturesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/api-features/api-features.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getPaginationList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/api-features/api-features.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPaginationList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPaginationList(model: string, apiFeaturesDto: ApiFeaturesDto)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/api-features/api-features.service.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    model\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    apiFeaturesDto\n                                    \n                                            ApiFeaturesDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, InternalServerErrorException } from '@nestjs/common';\nimport { PrismaService } from '../../prisma/prisma.service';\nimport { ApiFeaturesDto } from './dto/api-features.dto';\n\n@Injectable()\nexport class ApiFeaturesService {\n  constructor(private prisma: PrismaService) {}\n\n  async getPaginationList(\n    model: string,\n    apiFeaturesDto: ApiFeaturesDto,\n  ): Promise {\n    if (!model) throw new InternalServerErrorException('No model provided!');\n    apiFeaturesDto.take = apiFeaturesDto.take || 15;\n    apiFeaturesDto.page = apiFeaturesDto.page || 1;\n    apiFeaturesDto.page = apiFeaturesDto.page \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                forgetPassword\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                resetForgottenPassword\n                            \n                            \n                                    Async\n                                signToken\n                            \n                            \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwt: JwtService, config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changePassword\n                        \n                    \n                \n            \n            \n                \nchangePassword(changePasswordDto: ChangePasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:156\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    changePasswordDto\n                                    \n                                            ChangePasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedUserAndTokenDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        forgetPassword\n                        \n                    \n                \n            \n            \n                \nforgetPassword(forgetPasswordDto: ForgetPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    forgetPasswordDto\n                                    \n                                            ForgetPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(authDto: AuthDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authDto\n                                    \n                                            AuthDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resetForgottenPassword\n                        \n                    \n                \n            \n            \n                \nresetForgottenPassword(resetToken: string, resetForgottenPasswordDto: ResetForgottenPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    resetToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    resetForgottenPasswordDto\n                                    \n                                            ResetForgottenPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedUserAndTokenDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    signToken(userId: number, email: string, type: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                    \n                    signup(authSignupDto: AuthSignupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authSignupDto\n                                    \n                                            AuthSignupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthSignupDto } from './dto/auth-signup.dto';\nimport { AuthDto } from './dto/auth.dto';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { ForgetPasswordDto } from './dto/forget-password.dto';\nimport { ResetForgottenPasswordDto } from './dto/reset-forgotten-password.dto';\nimport { ReturnedUserAndTokenSignupDto } from '../user/dto/returned-user-and-token-signup.dto';\nimport { returnedUserAndTokenSignupDto } from '../user/dummy-data/dummy-user-and-token-signup';\nimport { ReturnedUserAndTokenDto } from '../user/dto/returned-user-and-token.dto';\nimport { returnedUserAndTokenDto } from '../user/dummy-data/dummy-user-and-token';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { PrismaClientKnownRequestError } from '@prisma/client/runtime';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport * as argon from 'argon2';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private jwt: JwtService,\n    private config: ConfigService,\n  ) {}\n\n  async login(authDto: AuthDto): Promise {\n    // find the user by email\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email: authDto.email,\n      },\n    });\n    // if user does not exist throw exception\n    if (!user) throw new UnauthorizedException('Credentials incorrect');\n\n    // compare password\n    const pwMatches = await argon.verify(user.passwordHash, authDto.password);\n    // if password incorrect throw exception\n    if (!pwMatches) throw new UnauthorizedException('Credentials incorrect');\n    let token;\n    const teacher = await this.prisma.teacher.findUnique({\n      where: {\n        id: user.id,\n      },\n    });\n    if (teacher != null) {\n      token = await this.signToken(user.id, user.email, 'teacher');\n    } else {\n      token = await this.signToken(user.id, user.email, 'student');\n    }\n    delete user.passwordHash;\n    return {\n      status: 'success',\n      token: token.access_token,\n      user,\n    };\n  }\n\n  async signup(\n    authSignupDto: AuthSignupDto,\n  ): Promise {\n    // generate the password hash\n    const hash = await argon.hash(authSignupDto.password);\n    // save the new user in the db\n    try {\n      const user = await this.prisma.user.create({\n        data: {\n          email: authSignupDto.email,\n          passwordHash: hash,\n          name: authSignupDto.name,\n          username: authSignupDto.username,\n          phone: authSignupDto.phoneNumber,\n        },\n      });\n      switch (authSignupDto.type) {\n        case 'teacher':\n          await this.prisma.teacher.create({\n            data: {\n              id: user.id,\n            },\n          });\n          break;\n        case 'student':\n          await this.prisma.student.create({\n            data: {\n              id: user.id,\n            },\n          });\n        default:\n          break;\n      }\n\n      const token = await this.signToken(\n        user.id,\n        user.email,\n        authSignupDto.type,\n      );\n      delete user.passwordHash;\n      return {\n        status: 'success',\n        token: token.access_token,\n        user,\n      };\n    } catch (error) {\n      if (error instanceof PrismaClientKnownRequestError) {\n        if (error.code === 'P2002') {\n          throw new ForbiddenException('Credentials taken');\n        }\n      }\n      throw error;\n    }\n  }\n\n  async signToken(\n    userId: number,\n    email: string,\n    type: string,\n  ): Promise {\n    const payload = {\n      sub: userId,\n      email,\n      type,\n    };\n    const secret = this.config.get('JWT_SECRET');\n\n    const token = await this.jwt.signAsync(payload, {\n      expiresIn: '12h',\n      secret: secret,\n    });\n\n    return {\n      access_token: token,\n    };\n  }\n\n  forgetPassword(forgetPasswordDto: ForgetPasswordDto): {\n    status: string;\n    message: string;\n  } {\n    return {\n      status: 'success',\n      message: '.تم إرسال الرابط إلى بريدك الإلكتروني بنجاح',\n    };\n  }\n\n  resetForgottenPassword(\n    resetToken: string,\n    resetForgottenPasswordDto: ResetForgottenPasswordDto,\n  ): ReturnedUserAndTokenDto {\n    return returnedUserAndTokenDto;\n  }\n\n  changePassword(\n    changePasswordDto: ChangePasswordDto,\n  ): ReturnedUserAndTokenDto {\n    return returnedUserAndTokenDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GroupService.html":{"url":"injectables/GroupService.html","title":"injectable - GroupService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GroupService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/group/group.service.ts\n        \n\n\n            \n                Description\n            \n            \n                service for group module\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                acceptStudent\n                            \n                            \n                                askToJoinAGroup\n                            \n                            \n                                create\n                            \n                            \n                                    Async\n                                createAnnouncement\n                            \n                            \n                                    Async\n                                deleteAnnouncement\n                            \n                            \n                                deleteStudent\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                getAnnouncements\n                            \n                            \n                                getGroupStudents\n                            \n                            \n                                getMyGroups\n                            \n                            \n                                getUnhafezStudents\n                            \n                            \n                                giveBadgeToStudent\n                            \n                            \n                                leaveGroup\n                            \n                            \n                                markStudentAsHafez\n                            \n                            \n                                remove\n                            \n                            \n                                removeBadgeFromStudent\n                            \n                            \n                                update\n                            \n                            \n                                uploadLogo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, apiFeatures: ApiFeaturesService)\n                    \n                \n                        \n                            \n                                Defined in src/group/group.service.ts:20\n                            \n                        \n\n                \n                    \n                            class constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                prisma service\n\n                                                        \n                                                \n                                                \n                                                        apiFeatures\n                                                  \n                                                        \n                                                                        ApiFeaturesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                API features service\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        acceptStudent\n                        \n                    \n                \n            \n            \n                \nacceptStudent(groupId: string, studentId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    studentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        askToJoinAGroup\n                        \n                    \n                \n            \n            \n                \naskToJoinAGroup(groupId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createGroupDto: CreateGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:190\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createGroupDto\n                                    \n                                            CreateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { id: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createAnnouncement\n                        \n                    \n                \n            \n            \n                \n                    \n                    createAnnouncement(groupId: number, teacherId: number, announcementDto: CreateAnnouncementDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:66\n                \n            \n\n\n            \n                \n                    creates an announcement\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the group's id\n\n                                    \n                                \n                                \n                                    teacherId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the teacher's id\n\n                                    \n                                \n                                \n                                    announcementDto\n                                    \n                                            CreateAnnouncementDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        encapsulates announcement creation data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the created announcement\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAnnouncement\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAnnouncement(groupId: number, teacherId: number, announcementId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:153\n                \n            \n\n\n            \n                \n                    delete a certain group announcement by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the group's id\n\n                                    \n                                \n                                \n                                    teacherId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the teacher's id\n\n                                    \n                                \n                                \n                                    announcementId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the announcement's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        status and a message for success or fail\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteStudent\n                        \n                    \n                \n            \n            \n                \ndeleteStudent(groupId: string, studentId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    studentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:198\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedGroupDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAnnouncements\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAnnouncements(groupId: number, userId: number, take: number, page: number)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:103\n                \n            \n\n\n            \n                \n                    get a certain group announcements\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the group's id\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the user's id\n\n                                    \n                                \n                                \n                                    take\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a number determines the wanted amount of announcements\n\n                                    \n                                \n                                \n                                    page\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        a number determines the wanted page of announcements (starts from 1, 2, ....)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the group's announcements\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getGroupStudents\n                        \n                    \n                \n            \n            \n                \ngetGroupStudents(groupId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMyGroups\n                        \n                    \n                \n            \n            \n                \ngetMyGroups(userId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:187\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUnhafezStudents\n                        \n                    \n                \n            \n            \n                \ngetUnhafezStudents(groupId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        giveBadgeToStudent\n                        \n                    \n                \n            \n            \n                \ngiveBadgeToStudent(groupId: string, studentId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    studentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leaveGroup\n                        \n                    \n                \n            \n            \n                \nleaveGroup(groupId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        markStudentAsHafez\n                        \n                    \n                \n            \n            \n                \nmarkStudentAsHafez(groupId: string, studentId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    studentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:212\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeBadgeFromStudent\n                        \n                    \n                \n            \n            \n                \nremoveBadgeFromStudent(groupId: string, studentId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    studentId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateGroupDto: UpdateGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:208\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateGroupDto\n                                    \n                                            UpdateGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { status: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uploadLogo\n                        \n                    \n                \n            \n            \n                \nuploadLogo(groupId: string, file: Express.Multer.File)\n                \n            \n\n\n            \n                \n                    Defined in src/group/group.service.ts:184\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    groupId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { path: string; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { Group, GroupAnnouncement, Prisma } from '@prisma/client';\nimport { ApiFeaturesDto } from 'src/utils/api-features/dto/api-features.dto';\nimport { PrismaService } from '../prisma/prisma.service';\nimport { ApiFeaturesService } from '../utils/api-features/api-features.service';\nimport { CreateAnnouncementDto } from './dto/create-announcements.dto';\nimport { CreateGroupDto } from './dto/create-group.dto';\nimport { ReturnedGroupDto } from './dto/returned-group.dto';\nimport { UpdateGroupDto } from './dto/update-group.dto';\n\n/**\n * service for group module\n */\n@Injectable()\nexport class GroupService {\n  /**\n   * class constructor\n   * @param prisma prisma service\n   * @param apiFeatures  API features service\n   */\n  constructor(\n    private prisma: PrismaService,\n    private apiFeatures: ApiFeaturesService,\n  ) {}\n\n  removeBadgeFromStudent(groupId: string, studentId: string) {\n    return { status: 'success' };\n  }\n  giveBadgeToStudent(groupId: string, studentId: string) {\n    return { status: 'success' };\n  }\n  deleteStudent(groupId: string, studentId: string) {\n    return { status: 'success' };\n  }\n  acceptStudent(groupId: string, studentId: string) {\n    return { status: 'success' };\n  }\n  leaveGroup(groupId: string) {\n    return { status: 'success' };\n  }\n  askToJoinAGroup(groupId: string) {\n    return { status: 'success' };\n  }\n  markStudentAsHafez(groupId: string, studentId: string) {\n    return { status: 'success' };\n  }\n\n  getUnhafezStudents(groupId: string) {\n    return [];\n  }\n  getGroupStudents(groupId: string) {\n    return [];\n  }\n  /**\n   * creates an announcement\n   * @param groupId the group's id\n   * @param teacherId the teacher's id\n   * @param announcementDto encapsulates announcement creation data\n   * @returns the created announcement\n   */\n  async createAnnouncement(\n    groupId: number,\n    teacherId: number,\n    announcementDto: CreateAnnouncementDto,\n  ): Promise {\n    if (!teacherId)\n      throw new UnauthorizedException('!يجب أن تكون المحفظ لهذه الحلقة');\n    const group: Group = await this.prisma.group.findUnique({\n      where: {\n        id: groupId,\n      },\n    });\n    if (!group) throw new NotFoundException('!لا وجود لهذه الحلقة');\n    if (group.teacherId !== teacherId) {\n      throw new UnauthorizedException('!يجب أن تكون المحفظ لهذه الحلقة');\n    }\n    const announcement: GroupAnnouncement =\n      await this.prisma.groupAnnouncement.create({\n        data: {\n          teacherId,\n          groupId,\n          ...announcementDto,\n        },\n      });\n    return {\n      status: 'success',\n      announcement,\n    };\n  }\n  /**\n   * get a certain group announcements\n   * @param groupId the group's id\n   * @param userId the user's id\n   * @param take a number determines the wanted amount of announcements\n   * @param page a number determines the wanted page of announcements (starts from 1, 2, ....)\n   * @returns the group's announcements\n   */\n  async getAnnouncements(\n    groupId: number,\n    userId: number,\n    take: number, // for pagination\n    page: number, // for pagination\n  ): Promise {\n    if (!userId)\n      throw new UnauthorizedException('!يجب أن تكون منضم لهذه الحلقة');\n    // check whether he is a teacher of this group or a student in it\n    const group: Group = await this.prisma.group.findUnique({\n      where: {\n        id: groupId,\n      },\n    });\n    if (!group) throw new NotFoundException('!لا وجود لهذه الحلقة');\n    const isStudent: number = await this.prisma.groupStudent.count({\n      where: {\n        groupId,\n        studentId: userId,\n      },\n    });\n    if (group.teacherId !== userId && isStudent  {\n    if (!teacherId)\n      throw new UnauthorizedException('!يجب أن تكون المحفظ لهذه الحلقة');\n    const group: Group = await this.prisma.group.findUnique({\n      where: {\n        id: groupId,\n      },\n    });\n    if (!group) throw new NotFoundException('!لا وجود لهذه الحلقة');\n    if (group.teacherId !== teacherId) {\n      throw new UnauthorizedException('!يجب أن تكون المحفظ لهذه الحلقة');\n    }\n    try {\n      await this.prisma.groupAnnouncement.delete({\n        where: {\n          id: announcementId,\n        },\n      });\n    } catch (err) {\n      console.error(err);\n      throw new NotFoundException('!لا وجود لهذا الإعلان');\n    }\n    return {\n      status: 'success',\n      message: '.تم حذف الإعلان بنجاح',\n    };\n  }\n  uploadLogo(groupId: string, file: Express.Multer.File) {\n    return { path: '/path/to/file' };\n  }\n  getMyGroups(userId: string) {\n    return [];\n  }\n  create(createGroupDto: CreateGroupDto) {\n    return { id: 'group_id' };\n  }\n\n  findAll() {\n    return [];\n  }\n\n  findOne(id: number) {\n    const dto: ReturnedGroupDto = {\n      createdAt: new Date(),\n      id: 'id',\n      logo: '/path/to/logo',\n      name: 'group name',\n    };\n    return dto;\n  }\n\n  update(id: number, updateGroupDto: UpdateGroupDto) {\n    return { status: 'success' };\n  }\n\n  remove(id: number) {\n    return { status: 'success' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OrganizationService.html":{"url":"injectables/OrganizationService.html","title":"injectable - OrganizationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OrganizationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/organization/organization.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                acceptJoiningRequest\n                            \n                            \n                                askToJoin\n                            \n                            \n                                create\n                            \n                            \n                                createGroup\n                            \n                            \n                                deleteTeacher\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                getAllGroups\n                            \n                            \n                                getAllTeachers\n                            \n                            \n                                leave\n                            \n                            \n                                remove\n                            \n                            \n                                updateInfo\n                            \n                            \n                                updateLogo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/organization/organization.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        acceptJoiningRequest\n                        \n                    \n                \n            \n            \n                \nacceptJoiningRequest(id: string, teacherId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    teacherId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        askToJoin\n                        \n                    \n                \n            \n            \n                \naskToJoin(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createOrganizationDto: CreateOrganizationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOrganizationDto\n                                    \n                                            CreateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedOrganizationDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createGroup\n                        \n                    \n                \n            \n            \n                \ncreateGroup(createOrganizationGroupDto: CreateOrganizationGroupDto)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createOrganizationGroupDto\n                                    \n                                            CreateOrganizationGroupDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedGroupDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteTeacher\n                        \n                    \n                \n            \n            \n                \ndeleteTeacher(id: string, teacherId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    teacherId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:23\n                \n            \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedOrganizationDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllGroups\n                        \n                    \n                \n            \n            \n                \ngetAllGroups(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllTeachers\n                        \n                    \n                \n            \n            \n                \ngetAllTeachers(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        leave\n                        \n                    \n                \n            \n            \n                \nleave(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     literal type\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfo\n                        \n                    \n                \n            \n            \n                \nupdateInfo(id: string, updateOrganizationDto: UpdateOrganizationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateOrganizationDto\n                                    \n                                            UpdateOrganizationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedOrganizationDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateLogo\n                        \n                    \n                \n            \n            \n                \nupdateLogo(id: string, logo)\n                \n            \n\n\n            \n                \n                    Defined in src/organization/organization.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     ReturnedOrganizationDto\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateOrganizationGroupDto } from './dto/create-organization-group.dto';\nimport { CreateOrganizationDto } from './dto/create-organization.dto';\nimport { UpdateOrganizationDto } from './dto/update-organization.dto';\nimport { returnedGroupDto } from './dummy-data/dummy-group';\nimport { returnedOrganizationDto } from './dummy-data/dummy-organization';\nimport { ReturnedOrganizationDto } from './dto/returned-organization.dto';\nimport { ReturnedGroupDto } from './dto/returned-group.dto';\nimport { ReturnedUserDto } from '../user/dto/returned-user.dto';\nimport { returnedUserDto } from '../user/dummy-data/dummy-user';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class OrganizationService {\n  constructor(private prisma: PrismaService) {}\n\n  create(\n    createOrganizationDto: CreateOrganizationDto,\n  ): ReturnedOrganizationDto {\n    return returnedOrganizationDto;\n  }\n\n  findAll(): [ReturnedOrganizationDto] {\n    return [returnedOrganizationDto];\n  }\n\n  findOne(id: string): ReturnedOrganizationDto {\n    return returnedOrganizationDto;\n  }\n\n  updateInfo(\n    id: string,\n    updateOrganizationDto: UpdateOrganizationDto,\n  ): ReturnedOrganizationDto {\n    return returnedOrganizationDto;\n  }\n\n  updateLogo(id: string, logo: unknown): ReturnedOrganizationDto {\n    return returnedOrganizationDto;\n  }\n\n  remove(id: string): { status: string; message: string } {\n    return {\n      status: 'success',\n      message: '.تم مسح المنظمة بنجاح',\n    };\n  }\n\n  getAllTeachers(id: string): [ReturnedUserDto] {\n    return [returnedUserDto];\n  }\n\n  askToJoin(id: string): { status: string; message: string } {\n    return {\n      status: 'success',\n      message: '.تم إرسال طلب الدخول إلى هذه المنظمة بنجاح',\n    };\n  }\n\n  acceptJoiningRequest(\n    id: string,\n    teacherId: string,\n  ): { status: string; message: string } {\n    return {\n      status: 'success',\n      message: '.تم قبول طلب هذا المحفظ للدخول إلى هذه المنظمة بنجاح',\n    };\n  }\n\n  leave(id: string): { status: string; message: string } {\n    return {\n      status: 'success',\n      message: '.تم مغادرة المنظمة بنجاح',\n    };\n  }\n\n  deleteTeacher(\n    id: string,\n    teacherId: string,\n  ): { status: string; message: string } {\n    return {\n      status: 'success',\n      message: '.تم مسح هذا المحفظ من المنظمة بنجاح',\n    };\n  }\n\n  createGroup(\n    createOrganizationGroupDto: CreateOrganizationGroupDto,\n  ): ReturnedGroupDto {\n    return returnedGroupDto;\n  }\n\n  getAllGroups(id: string): [ReturnedGroupDto] {\n    return [returnedGroupDto];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cleanDb\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/prisma/prisma.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cleanDb\n                        \n                    \n                \n            \n            \n                \ncleanDb()\n                \n            \n\n\n            \n                \n                    Defined in src/prisma/prisma.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PrismaClient } from '@prisma/client';\n\n@Injectable()\nexport class PrismaService extends PrismaClient {\n  constructor(config: ConfigService) {\n    super({\n      datasources: {\n        db: {\n          url: config.get('DATABASE_URL'),\n        },\n      },\n    });\n  }\n  cleanDb() {\n    return this.$transaction([\n      this.studentBadge.deleteMany(),\n      this.badge.deleteMany(),\n      this.groupAnnouncement.deleteMany(),\n      this.organizationTeacher.deleteMany(),\n      this.groupStudent.deleteMany(),\n      this.group.deleteMany(),\n      this.organization.deleteMany(),\n      this.student.deleteMany(),\n      this.teacher.deleteMany(),\n      this.user.deleteMany(),\n    ]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getProfile\n                            \n                            \n                                getStudentSchedule\n                            \n                            \n                                getTeacherSchedule\n                            \n                            \n                                getUser\n                            \n                            \n                                updateInfo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getProfile\n                        \n                    \n                \n            \n            \n                \ngetProfile(getUserInfoDto: GetUserInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getUserInfoDto\n                                    \n                                            GetUserInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStudentSchedule\n                        \n                    \n                \n            \n            \n                \ngetStudentSchedule(getUserInfoDto: GetUserInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getUserInfoDto\n                                    \n                                            GetUserInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTeacherSchedule\n                        \n                    \n                \n            \n            \n                \ngetTeacherSchedule(getUserInfoDto: GetUserInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getUserInfoDto\n                                    \n                                            GetUserInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(getUserInfoDto: GetUserInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getUserInfoDto\n                                    \n                                            GetUserInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateInfo\n                        \n                    \n                \n            \n            \n                \nupdateInfo(updateInfoDto: UpdateInfoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateInfoDto\n                                    \n                                            UpdateInfoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateInfoDto } from './dto/update-info.dto';\nimport { ReturnedUserInfoDto } from './dto/returned-user-info.dto';\nimport { GetUserInfoDto } from './dto/get-user-info.dto';\nimport { ReturnedStudentScheduleDto } from './dto/returned-student-schedule.dto';\nimport { ReturnedTeacherScheduleDto } from './dto/returned-teacher-schedule.dto';\nimport { returnedUserDto } from './dummy-data/dummy-user';\nimport { PrismaService } from '../prisma/prisma.service';\n\n@Injectable()\nexport class UserService {\n  constructor(private prisma: PrismaService) {}\n\n  updateInfo(updateInfoDto: UpdateInfoDto) {\n    return returnedUserDto;\n  }\n\n  getUser(getUserInfoDto: GetUserInfoDto) {\n    return ReturnedUserInfoDto;\n  }\n\n  getProfile(getUserInfoDto: GetUserInfoDto) {\n    return returnedUserDto;\n  }\n\n  getStudentSchedule(getUserInfoDto: GetUserInfoDto) {\n    return [ReturnedStudentScheduleDto];\n  }\n\n  getTeacherSchedule(getUserInfoDto: GetUserInfoDto) {\n    return [ReturnedTeacherScheduleDto];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/group/group.service.ts\n            \n            injectable\n            GroupService\n            \n                23 %\n                (5/21)\n            \n        \n        \n            \n                \n                src/organization/organization.service.ts\n            \n            injectable\n            OrganizationService\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/utils/api-features/api-features.service.ts\n            \n            injectable\n            ApiFeaturesService\n            \n                0 %\n                (0/3)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.1\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/swagger : ^6.1.4\n        \n            @prisma/client : ^4.9.0\n        \n            argon2 : ^0.30.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            dotenv-cli : ^7.0.0\n        \n            lightcookie : ^1.0.25\n        \n            pactum : ^3.3.2\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.0\n        \n            Description : This is a website for helping the Quraan teachers to manage their students groups\n        \n            License : UNLICENSED\n        \n            Author : Omar Fareed, Mohamed Nabil, and Moaz Mohamed\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
